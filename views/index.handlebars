<!doctype html>
<title>Zoopla → Trello</title>

<div class="loading global-loading"></div>
<main></main>

<script>
appKey = {{{stringify trelloAppKey}}}
</script>

<style>
@font-face{
	src: url(//h2.ft.com/build/files/o-fonts-assets@1.3.0/MetricWeb-Light.woff#iefix) format("woff");
	font-family: Metric;
}

* {
	box-sizing: border-box;
}

input:focus::-webkit-input-placeholder {
	transition: color 0.2s;
	color:transparent;
}

@keyframes rotate {
	0% { transform: rotate(0); }
	100% { transform: rotate(359.9deg); }
}

.hide {
	opacity: 0;
}

.loading {

	width: 20px;
	height: 20px;
	color: #555;
	border: 2px solid;
	border-left-style: none;
	border-radius: 20px;
	animation: rotate 1s linear infinite;
	transition: opacity 0.1s;
}

.global-loading {
	position: absolute;
	left: 50%;
	top: 10%;
	margin-left: -10px;
}

body {
	background: #f5f5f5;
	margin: 0;
	font-family: Metric;
	font-size: 20px;
	display: flex;
	align-items: center;
	justify-content: space-around;
}

main {
	width: 100%;
	max-width: 600px;
	display: flex;
	flex-direction: column;
	align-items: center;
}

html, body {
	height: 100%;
}

a {
	color: #2e6e9e;
	text-decoration: none;
}

a:not(.btn):hover, a:not(.btn):active {
	text-decoration: underline;
}

a:not(.btn):visited {
	color: #598caf;
}

a[target=_blank]::after {
	content: '⎋';
	display: inline-block;
	transform: rotate(90deg);
	font-size: 0.8em;
}

.btn, [type=submit] {
	display: inline-block;
	background: #2bbbbf;
	color: rgba(0,0,0,0.5);
	cursor: pointer;
}

.btn-blue {
	background: #0e6dcc;
}

.input-group {
	display: flex;
}

.input-group .input-group-flex {
	flex: 1;
}

.input-group input {
	border-radius: 0;
	margin-right: -1px;
}

.input-group input:first-child {
	border-top-left-radius: 2px;
	border-bottom-left-radius: 2px;
}

.input-group input:last-child {
	border-top-right-radius: 2px;
	border-bottom-right-radius: 2px;
}

form {
	width: 100%;
}

label {
	font-size: 0.8em;
}

input, select {
	color: #333333;
	border-color: #b0b0b0;
}

input:focus {
	border-color: #2bbbbf;
	outline: none;
}

input, .btn, select, button {
	transition-property: background border color;
	transition-duration: 0.2s;
	font: inherit;
	line-height: 24px;
	padding: 6px 14px;
	border-radius: 2px;
	border: 1px solid;
}

.card-list {
	list-style: none;
	padding: 0;
}

.card-list a {
	display:inline-block;
	padding: 0.25em;
}

.error {
	color: #b1493f;
}

button .loading {
	color: inherit;
}

[disabled] {
	opacity: 0.75;
	pointer-events: none;
	cursor: not-allowed;
}
</style>

<script>
	var store = {
		listener() {},
		get(key) {
			return key ?
				(localStorage[key] && JSON.parse(localStorage[key])) :
				Object.keys(localStorage).reduce(
					(obj, key) => (obj[key] = this.get(key), obj),
					{}
				);
		},
		set(key, val) {
			this.listener(
				key, this.get(key), (
					localStorage[key] = JSON.stringify(val),
					this.get(key)
				)
			);
		},
		clear() {
			localStorage.clear();
			this.listener();
		},
		onchange(listener) {
			this.listener = listener;
		}
	};

	window.addEventListener('storage', ev => store.listener(ev.key, ev.oldValue, ev.newValue));

	var trelloBase = new URL('https://trello.com/1/');
	var objToQuery = obj => Object.keys(obj).reduce(
		(search, key) => (search.set(key, obj[key]), search),
		new URLSearchParams()
	).toString();

	var trelloUrl = (path, query) => new URL(path + '?' + objToQuery(query), trelloBase).toString();

	var authUrl = trelloUrl('authorize', {
		key: appKey,
		name: 'Zoopla → Trello',
		response_type: 'token',
		scope: 'read,write',
		callback_method: 'fragment',
		return_url: location.href,
	});

	function trelloFetch(url, query) {
		query = query || {};

		if(typeof url === 'string') {
			var urlString = url;
			url = () => urlString;
		}

		return (...args) => {
			query.key = appKey;
			query.token = store.get('trelloAuth');
			return fetch(trelloUrl(url(...args), query)).then(r => r.json());
		}
	}

	var getBoards = trelloFetch('members/me/boards');
	var getLists  = trelloFetch(boardId => `boards/${boardId}/lists`);

	withVal = function(fn) {
		return ev => ev.currentTarget.value && fn(ev.currentTarget.value);
	}

	setStorage = function(key) {
		return val => store.set(key, val);
	};

	formFetch = function(onsuccess, onerror) {
		return ev => {
			document.querySelector('.error').classList.add('hide');
			var form = ev.currentTarget;
			var button = form.querySelector('[type=submit]');
			var origButtonContent = button.innerHTML;
			button.innerHTML = '<div class="loading"></div>';
			button.disabled = true;

			ev.preventDefault();
			fetch(form.action || '/', {
				method: form.method,
				body: new FormData(form)
			})
			.then(r => r.ok ? r.json() : r.json().then(e => {throw new Error(e.error)}))
			.then(result => onsuccess(result))
			.catch(e => onerror(e.message))
			.then(() => {
				button.disabled = false;
				button.innerHTML = origButtonContent;
			});
		}
	};

	appendStorage = function(key) {
		return val => {
			store.set(key, (store.get(key) || []).concat(val));
		}
	};

	error = function(msg) {
		var err = document.querySelector('.error');
		err.classList.remove('hide');
		err.textContent = msg;
	}

	var renderSelect = (key, label) => list => `<select onChange="withVal(setStorage('${key}'))(event)">
		<option>Select a ${label}...</option>
		${list.map(item => `<option value="${item.id}" label="${item.name}">${item.name}</option>`).join('\n')}
	</select>`;

	var renderCards = cards => `<ul class="card-list">${(cards || [])
		.map(card => `<li><a href="${card.url}" target="_blank">${card.name} </a>`)
		.join('\n')}</ul`;

	var template = data =>
		  !data.trelloAuth ? `<a class="btn btn-blue" href="${authUrl}">Log in to Trello</a>`
		: !data.boardId    ? getBoards().then(boards => boards.filter(board => !board.closed)).then(renderSelect('boardId', 'board'))
		: !data.listId     ? getLists(data.boardId).then(renderSelect('listId', 'list'))
		: `<form method="post" action="/_submit" onsubmit="formFetch(appendStorage('cards'), error)(event)">
			<input type="hidden" name="auth" value="${data.trelloAuth}">
			<input type="hidden" name="list" value="${data.listId}">
			<label for="property">Zoopla property</label>
			<div class="input-group">
				<input required class="input-group-flex" type="text" name="property" placeholder="http://www.zoopla.co.uk/for-sale/details/12345678">
				<button type="submit">Add to Trello</button>
			</div>
			<div class="error hide"></div>
		</form>
		${renderCards(data.cards)}`;

	var setContent = html => {
		document.querySelector('.global-loading').classList.add('hide');
		document.querySelector('main').innerHTML = html;
	}

	var showError = msg => setContent(`<pre style="color:darkred">${msg}</pre>`);

	var render = () => {
		document.querySelector('.global-loading').classList.remove('hide');
		return Promise.resolve(store.get()).then(template)
		.then(setContent)
		.catch(err => showError(err.stack))
	};

	var main = () => {
		render();
		store.onchange(render);
		window.onerror = showError;

		if(location.hash) {
			var token = new URLSearchParams(location.hash.substr(1)).get('token');
			store.set('trelloAuth', token);
			location.hash = '';
		}
	};

	main();
</script>
