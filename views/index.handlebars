<!doctype html>
<title>Zoopla → Trello</title>

<main></main>

<script>
appKey = {{{stringify trelloAppKey}}}
</script>

<script>
	var store = {
		listener() {},
		get(key) {
			return key ?
				(localStorage[key] && JSON.parse(localStorage[key])) :
				Object.keys(localStorage).reduce(
					(obj, key) => (obj[key] = this.get(key), obj),
					{}
				);
		},
		set(key, val) {
			this.listener(
				key, this.get(key), (
					localStorage[key] = JSON.stringify(val),
					this.get(key)
				)
			);
		},
		clear() {
			localStorage.clear();
			this.listener();
		},
		onchange(listener) {
			this.listener = listener;
		}
	};

	window.addEventListener('storage', ev => store.listener(ev.key, ev.oldValue, ev.newValue));

	var trelloBase = new URL('https://trello.com/1/');
	var objToQuery = obj => Object.keys(obj).reduce(
		(search, key) => (search.set(key, obj[key]), search),
		new URLSearchParams()
	).toString();

	var trelloUrl = (path, query) => new URL(path + '?' + objToQuery(query), trelloBase).toString();

	var authUrl = trelloUrl('authorize', {
		key: appKey,
		name: 'Zoopla → Trello',
		response_type: 'token',
		scope: 'read,write',
		callback_method: 'fragment',
		return_url: location.href,
	});

	function trelloFetch(url, query) {
		query = query || {};

		if(typeof url === 'string') {
			var urlString = url;
			url = () => urlString;
		}

		return (...args) => {
			query.key = appKey;
			query.token = store.get('trelloAuth');
			return fetch(trelloUrl(url(...args), query)).then(r => r.json());
		}
	}

	var getBoards = trelloFetch('members/me/boards');
	var getLists  = trelloFetch(boardId => `boards/${boardId}/lists`);

	setStorage = function(key) {
		return ev => ev.currentTarget.value && store.set(key, ev.currentTarget.value);
	};

	formFetch = function(setter) {
		return ev => {
			var form = ev.currentTarget;
			ev.preventDefault();
			fetch(form.action || '/', {
				method: form.method,
				body: new FormData(form)
			}).then(r => r.json()).then(result => setter(result));
		}
	}

	appendStorage = function(key) {
		return val => {
			store.set(key, (store.get(key) || []).concat(val));
		}
	}

	var renderSelect = key => list => `<select onChange="setStorage('${key}')(event)">
		<option></option>
		${list.map(item => `<option value="${item.id}" label="${item.name}">${item.name}</option>`).join('\n')}
	</select>`;

	var renderCards = cards => `<ul>${(cards || [])
		.map(card => `<li><a href="${card.url}" target="_blank">${card.name} ⎋</a>`)
		.join('\n')}</ul`;

	var template = data =>
		  !data.trelloAuth ? `<a class="btn" href="${authUrl}">Log in to Trello</a>`
		: !data.boardId    ? getBoards().then(boards => boards.filter(board => !board.closed)).then(renderSelect('boardId'))
		: !data.listId     ? getLists(data.boardId).then(renderSelect('listId'))
		: `<form method="post" action="/_submit" onsubmit="formFetch(appendStorage('cards'))(event)">
			<input type="hidden" name="auth" value="${data.trelloAuth}">
			<input type="hidden" name="list" value="${data.listId}">
			<label>Zoopla property <input type="text" name="property" placeholder="http://www.zoopla.co.uk/for-sale/details/12345678"></label>
			<input type="submit" value="Add to Trello">
		</form>${renderCards(data.cards)}`;

	var render = () => Promise.resolve(store.get()).then(template)
		.then(html => document.querySelector('main').innerHTML = html)
		.catch(err => document.querySelector('main').innerHTML = `<pre style="color:darkred">${err.stack}</pre>`);

	var main = () => {
		render();
		store.onchange(render);

		if(location.hash) {
			var token = new URLSearchParams(location.hash.substr(1)).get('token');
			store.set('trelloAuth', token);
		}
	};

	main();
</script>
